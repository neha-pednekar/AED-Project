/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.OrganBank;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.OrganBank.Eyes;
import Business.OrganBank.Heart;
import Business.OrganBank.Kidney;
import Business.OrganBank.Liver;
import Business.Organization.HospitalOrganization;
import Business.Organization.OrganBankOrganization;
import Business.Organization.Organization;
import Business.RegisterDonar.Donar;
import Business.RegisterDonar.Organ;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Interface.HospitalAdmin.DienerManageRequestJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Chintan
 */
public class UpdateOrganRepoJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateOrganRepoJPanel
     */
    private JPanel userProcessContainer;
    private OrganBankOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    private WorkRequest request;

    UpdateOrganRepoJPanel(JPanel userProcessContainer, UserAccount userAccount, OrganBankOrganization organization, Enterprise enterprise, EcoSystem business, WorkRequest request) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.business = business;
        this.request = request;
        populateFields();
    }

    public void populateFields() {
        txtAge.setText(String.valueOf(request.getDonar().getAge()));
        txtPersonId.setText(String.valueOf(request.getDonar().getDonarID()));
        for (Organ organ : request.getDonar().getOrganList()) {
            if (organ.getOrganName().equalsIgnoreCase("Kidney")&& organ.getCondition().equalsIgnoreCase("good")) {
                txtKidney.setText(String.valueOf(organ.getQuantity()));
            }
            if (organ.getOrganName().equalsIgnoreCase("Heart")&& organ.getCondition().equalsIgnoreCase("good")) {
                txtHeart.setText(String.valueOf(organ.getQuantity()));
            }
            if (organ.getOrganName().equalsIgnoreCase("Liver")&& organ.getCondition().equalsIgnoreCase("good")) {
                txtLiver.setText(String.valueOf(organ.getQuantity()));
            }
            if (organ.getOrganName().equalsIgnoreCase("Eyes")&& organ.getCondition().equalsIgnoreCase("good")) {
                txtEyes.setText(String.valueOf(organ.getQuantity()));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPersonId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEyes = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtKidney = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtLiver = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtHeart = new javax.swing.JTextField();
        btnUpdateInventory = new javax.swing.JButton();
        txtAge = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        jLabel1.setText("Person ID:");

        txtPersonId.setEditable(false);

        jLabel2.setText("Age :");

        jLabel3.setText("Eyes :");

        txtEyes.setEditable(false);

        jLabel4.setText("Kidney :");

        txtKidney.setEditable(false);

        jLabel5.setText("Liver :");

        txtLiver.setEditable(false);

        jLabel6.setText("Heart :");

        txtHeart.setEditable(false);

        btnUpdateInventory.setText("Update Inventory");
        btnUpdateInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateInventoryActionPerformed(evt);
            }
        });

        txtAge.setEditable(false);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnBack)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(200, 200, 200)
                            .addComponent(btnUpdateInventory)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHeart, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLiver, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtKidney, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEyes, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(403, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEyes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtKidney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtLiver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtHeart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateInventory)
                    .addComponent(btnBack))
                .addContainerGap(264, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateInventoryActionPerformed
        // TODO add your handling code here:
        if(request.getObStatus().equalsIgnoreCase(("Completed"))){
            JOptionPane.showMessageDialog(null,"Already Added!");
        }
        else{
        int e = Integer.parseInt(txtEyes.getText());
        int k = Integer.parseInt(txtKidney.getText());
        int l = Integer.parseInt(txtLiver.getText());
        int h = Integer.parseInt(txtHeart.getText());
        
        for (int i = 0; i < e; i++) {
            Eyes eyes = organization.addEyes();
//           eyes.setAge(Integer.parseInt(txtAge.getText()));
            eyes.setDonor(request.getDonar());

        }

        for (int i = 0; i < k; i++) {
            Kidney kidney = organization.addKidney();
//           kidney.setAge(Integer.parseInt(txtAge.getText()));
            kidney.setDonor(request.getDonar());

        }

        for (int i = 0; i < l; i++) {
            Liver liver = organization.addLiver();
//           liver.getDonor().setAge(Integer.parseInt(txtAge.getText()));
            liver.setDonor(request.getDonar());

        }

        for (int i = 0; i < h; i++) {
            Heart heart = organization.addHeart();
//           heart.setAge(Integer.parseInt(txtAge.getText()));
            heart.setDonor(request.getDonar());
        }
        JOptionPane.showMessageDialog(null, "Inventory has been updated");
        request.setMessage("Added to Inventory");
        request.setType("OgDiener");
        request.setReceiver(userAccount);
        request.setObStatus("Completed");
        request.setStatus("Completed");
        
        for (Network network : business.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseDirectory()) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof OrganBankOrganization) {
                            for (UserAccount user : organization.getUserAccountDirectory().getUserAccountList()) {
                                if(user.getRole().getName().equalsIgnoreCase("Diener Assistant Role")){
                                for (WorkRequest req : user.getWorkQueue().getWorkRequestList()) {
                                    if (req.getOrganbankName().equalsIgnoreCase(request.getOrganbankName())) {
                                        if (req.getDonar().getDonarID() == request.getDonar().getDonarID()) {
                                            req.setMessage("Delivered");
                                            req.setStatus("Completed");
                                            req.setType("OGdiener");
                                            req.setObStatus("Completed");
                                           // JOptionPane.showMessageDialog(null, "Delivered");
                                            
                                        }
                                    }
                                }
                                }
                            }
                        }
                    }
                }
            }
        
        
        
        
        
        
        
        }
        
    }//GEN-LAST:event_btnUpdateInventoryActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        OrganBankAdminWorkAreaJPanel OrganBankAdminWorkAreaJPanel = (OrganBankAdminWorkAreaJPanel) component;
        OrganBankAdminWorkAreaJPanel.populateTable();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnUpdateInventory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEyes;
    private javax.swing.JTextField txtHeart;
    private javax.swing.JTextField txtKidney;
    private javax.swing.JTextField txtLiver;
    private javax.swing.JTextField txtPersonId;
    // End of variables declaration//GEN-END:variables
}
